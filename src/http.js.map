{"version":3,"sources":["../../../../modules/@angular/platform-server/src/http.ts"],"names":[],"mappings":"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","file":"http.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst /** @type {?} */ xhr2: any = require('xhr2');\n\nimport {Injectable, Provider} from '@angular/core/index';\nimport {BrowserXhr, Connection, ConnectionBackend, Http, ReadyState, Request, RequestOptions, Response, XHRBackend, XSRFStrategy} from '@angular/http/index';\n\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {Subscription} from 'rxjs/Subscription';\nexport class ServerXhr implements BrowserXhr {\n/**\n * @return {?}\n */\nbuild(): XMLHttpRequest { return new xhr2.XMLHttpRequest(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ServerXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nServerXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerXhr.ctorParameters;\n}\n\nexport class ServerXsrfStrategy implements XSRFStrategy {\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ServerXsrfStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nServerXsrfStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerXsrfStrategy.ctorParameters;\n}\n\nexport class ZoneMacroTaskConnection implements Connection {\n  response: Observable<Response>;\n  lastConnection: Connection;\n/**\n * @param {?} request\n * @param {?} backend\n */\nconstructor(public request: Request, backend: XHRBackend) {\n    this.response = new Observable((observer: Observer<Response>) => {\n      let task: Task = null;\n      let scheduled: boolean = false;\n      let sub: Subscription = null;\n      let savedResult: any = null;\n      let savedError: any = null;\n\n      const scheduleTask = (_task: Task) => {\n        task = _task;\n        scheduled = true;\n\n        this.lastConnection = backend.createConnection(request);\n        sub = (this.lastConnection.response as Observable<Response>)\n                  .subscribe(\n                      res => savedResult = res,\n                      err => {\n                        if (!scheduled) {\n                          throw new Error('invoke twice');\n                        }\n                        savedError = err;\n                        scheduled = false;\n                        task.invoke();\n                      },\n                      () => {\n                        if (!scheduled) {\n                          throw new Error('invoke twice');\n                        }\n                        scheduled = false;\n                        task.invoke();\n                      });\n      };\n\n      const cancelTask = (_task: Task) => {\n        if (!scheduled) {\n          return;\n        }\n        scheduled = false;\n        if (sub) {\n          sub.unsubscribe();\n          sub = null;\n        }\n      };\n\n      const onComplete = () => {\n        if (savedError !== null) {\n          observer.error(savedError);\n        } else {\n          observer.next(savedResult);\n          observer.complete();\n        }\n      };\n\n      // MockBackend is currently synchronous, which means that if scheduleTask is by\n      // scheduleMacroTask, the request will hit MockBackend and the response will be\n      // sent, causing task.invoke() to be called.\n      const _task = Zone.current.scheduleMacroTask(\n          'ZoneMacroTaskConnection.subscribe', onComplete, {}, () => null, cancelTask);\n      scheduleTask(_task);\n\n      return () => {\n        if (scheduled && task) {\n          task.zone.cancelTask(task);\n          scheduled = false;\n        }\n        if (sub) {\n          sub.unsubscribe();\n          sub = null;\n        }\n      };\n    });\n  }\n/**\n * @return {?}\n */\nget readyState(): ReadyState {\n    return !!this.lastConnection ? this.lastConnection.readyState : ReadyState.Unsent;\n  }\n}\n\nfunction ZoneMacroTaskConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nZoneMacroTaskConnection.prototype.response;\n/** @type {?} */\nZoneMacroTaskConnection.prototype.lastConnection;\n/** @type {?} */\nZoneMacroTaskConnection.prototype.request;\n}\n\nexport class ZoneMacroTaskBackend implements ConnectionBackend {\n/**\n * @param {?} backend\n */\nconstructor(private backend: XHRBackend) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any): ZoneMacroTaskConnection {\n    return new ZoneMacroTaskConnection(request, this.backend);\n  }\n}\n\nfunction ZoneMacroTaskBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nZoneMacroTaskBackend.prototype.backend;\n}\n\n/**\n * @param {?} xhrBackend\n * @param {?} options\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, options: RequestOptions) {\n  const /** @type {?} */ macroBackend = new ZoneMacroTaskBackend(xhrBackend);\n  return new Http(macroBackend, options);\n}\n\nexport const /** @type {?} */ SERVER_HTTP_PROVIDERS: Provider[] = [\n  {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n  {provide: BrowserXhr, useClass: ServerXhr},\n  {provide: XSRFStrategy, useClass: ServerXsrfStrategy},\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}