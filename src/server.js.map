{"version":3,"sources":["../../../../modules/@angular/platform-server/src/server.ts"],"names":[],"mappings":"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","file":"server.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformLocation} from '@angular/common/index';\nimport {platformCoreDynamic} from '@angular/compiler/index';\nimport {Injectable, InjectionToken, Injector, NgModule, PLATFORM_INITIALIZER, PlatformRef, Provider, RootRenderer, createPlatformFactory, isDevMode, platformCore} from '@angular/core/index';\nimport {BrowserModule, DOCUMENT} from '@angular/platform-browser/index';\n\nimport {ServerPlatformLocation} from './location';\nimport {Parse5DomAdapter, parseDocument} from './parse5_adapter';\nimport {PlatformState} from './platform_state';\nimport {DebugDomRootRenderer} from './private_import_core';\nimport {SharedStylesHost, getDOM} from './private_import_platform-browser';\nimport {ServerRootRenderer} from './server_renderer';\n/**\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(feature: string): Error {\n  throw new Error(`platform-server does not support '${feature}'.`);\n}\n\nexport const /** @type {?} */ INTERNAL_SERVER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  {provide: DOCUMENT, useFactory: _document, deps: [Injector]},\n  {provide: PLATFORM_INITIALIZER, useFactory: initParse5Adapter, multi: true, deps: [Injector]},\n  {provide: PlatformLocation, useClass: ServerPlatformLocation},\n  PlatformState,\n];\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction initParse5Adapter(injector: Injector) {\n  return () => { Parse5DomAdapter.makeCurrent(); };\n}\n/**\n * @param {?} rootRenderer\n * @return {?}\n */\nexport function _createConditionalRootRenderer(rootRenderer: any) {\n  if (isDevMode()) {\n    return new DebugDomRootRenderer(rootRenderer);\n  }\n  return rootRenderer;\n}\n\nexport const /** @type {?} */ SERVER_RENDER_PROVIDERS: Provider[] = [\n  ServerRootRenderer,\n  {provide: RootRenderer, useFactory: _createConditionalRootRenderer, deps: [ServerRootRenderer]},\n  // use plain SharedStylesHost, not the DomSharedStylesHost\n  SharedStylesHost\n];\n\n/**\n * Config object passed to initialize the platform.\n *\n * @experimental\n */\nexport interface PlatformConfig {\n  document?: string;\n  url?: string;\n}\n\n/**\n * The DI token for setting the initial config for the platform.\n *\n * @experimental\n */\nexport const /** @type {?} */ INITIAL_CONFIG = new InjectionToken<PlatformConfig>('Server.INITIAL_CONFIG');\n/**\n * The ng module for the server.\n * \n * \\@experimental\n */\nexport class ServerModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [BrowserModule],\n  providers: [\n    SERVER_RENDER_PROVIDERS,\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ServerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nServerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServerModule.ctorParameters;\n}\n\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction _document(injector: Injector) {\n  let /** @type {?} */ config: PlatformConfig|null = injector.get(INITIAL_CONFIG, null);\n  if (config && config.document) {\n    return parseDocument(config.document);\n  } else {\n    return getDOM().createHtmlDocument();\n  }\n}\n\n/**\n * @experimental\n */\nexport const /** @type {?} */ platformServer =\n    createPlatformFactory(platformCore, 'server', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n\n/**\n * The server platform that supports the runtime compiler.\n *\n * @experimental\n */\nexport const /** @type {?} */ platformDynamicServer =\n    createPlatformFactory(platformCoreDynamic, 'serverDynamic', INTERNAL_SERVER_PLATFORM_PROVIDERS);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}