{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-server/src/server.ts"],"names":[],"mappings":";AAAA,uBAA+B,iBAAiB,CAAC,CAAA;AACjD,qBAAmM,eAAe,CAAC,CAAA;AACnN,iCAA6F,2BAA2B,CAAC,CAAA;AAEzH,6BAAyD,iBAAiB,CAAC,CAAA;AAE3E,+BAA+B,kBAAkB,CAAC,CAAA;AAElD,IAAM,sBAAsB,GAAG,IAAI,kBAAW,CAAC,sBAAsB,CAAC,CAAC;AAEvE;;;;GAIG;AACU,iCAAyB,GAA2C;IAC/E,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,gCAAyB;IAC5E,EAAC,OAAO,EAAE,2BAAoB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAC;IACzE,EAAC,OAAO,EAAE,yBAAgB,EAAE,QAAQ,EAAE,0CAAuB,EAAC;CAC/D,CAAC;AAEW,oCAA4B,GACrC,CAAC,wCAAqB,EAAE,iDAA8B,CAAC,CAAC;AAE5D;IACE,iCAAgB,CAAC,WAAW,EAAE,CAAC;IAC/B,sBAAO,EAAE,CAAC;AACZ,CAAC;AAGD;IACE,EAAE,CAAC,CAAC,CAAC,kBAAW,EAAE,CAAC,CAAC,CAAC;QACnB,qBAAc,CAAC,yBAAkB,CAAC,gBAAgB,CAAC,iCAAyB,CAAC,CAAC,CAAC;IACjF,CAAC;IACD,MAAM,CAAC,qBAAc,CAAC,sBAAsB,CAAC,CAAC;AAChD,CAAC;AALe,sBAAc,iBAK7B,CAAA;AAGD,yBACI,gBAAsB,EACtB,eAAwD;IAC1D,wBAAS,CAAC,sBAAsB,GAAG,IAAI,qCAAsB,EAAE,CAAC;IAChE,IAAI,SAAS,GAAG,CAAC,oCAA4B,EAAE,eAAe,IAAI,EAAE,CAAC,CAAC;IACtE,IAAI,WAAW,GAAG,yBAAkB,CAAC,gBAAgB,CAAC,SAAS,EAAE,cAAc,EAAE,CAAC,QAAQ,CAAC,CAAC;IAC5F,MAAM,CAAC,2BAAoB,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;AAC7D,CAAC;AAPe,uBAAe,kBAO9B,CAAA","sourcesContent":["import {PlatformLocation} from '@angular/common';\nimport {ComponentRef, OpaqueToken, PLATFORM_COMMON_PROVIDERS, PLATFORM_INITIALIZER, PlatformRef, ReflectiveInjector, Type, assertPlatform, coreLoadAndBootstrap, createPlatform, getPlatform} from '@angular/core';\nimport {BROWSER_APP_COMPILER_PROVIDERS, BROWSER_APP_PROVIDERS, BrowserPlatformLocation} from '@angular/platform-browser';\n\nimport {ReflectionCapabilities, reflector, wtfInit} from '../core_private';\n\nimport {Parse5DomAdapter} from './parse5_adapter';\n\nconst SERVER_PLATFORM_MARKER = new OpaqueToken('ServerPlatformMarker');\n\n/**\n * A set of providers to initialize the Angular platform in a server.\n *\n * Used automatically by `serverBootstrap`, or can be passed to {@link platform}.\n */\nexport const SERVER_PLATFORM_PROVIDERS: Array<any /*Type | Provider | any[]*/> = [\n  {provide: SERVER_PLATFORM_MARKER, useValue: true}, PLATFORM_COMMON_PROVIDERS,\n  {provide: PLATFORM_INITIALIZER, useValue: initParse5Adapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation}\n];\n\nexport const SERVER_APPLICATION_PROVIDERS: Array<any> =\n    [BROWSER_APP_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS];\n\nfunction initParse5Adapter() {\n  Parse5DomAdapter.makeCurrent();\n  wtfInit();\n}\n\n\nexport function serverPlatform(): PlatformRef {\n  if (!getPlatform()) {\n    createPlatform(ReflectiveInjector.resolveAndCreate(SERVER_PLATFORM_PROVIDERS));\n  }\n  return assertPlatform(SERVER_PLATFORM_MARKER);\n}\n\n\nexport function serverBootstrap(\n    appComponentType: Type,\n    customProviders?: Array<any /*Type | Provider | any[]*/>): Promise<ComponentRef<any>> {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n  let providers = [SERVER_APPLICATION_PROVIDERS, customProviders || []];\n  var appInjector = ReflectiveInjector.resolveAndCreate(providers, serverPlatform().injector);\n  return coreLoadAndBootstrap(appComponentType, appInjector);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}